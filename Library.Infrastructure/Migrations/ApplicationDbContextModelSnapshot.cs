// <auto-generated />
using System;
using Library.Infrastructure.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Library.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Library.Domain.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UploadedBy")
                        .HasColumnType("integer");

                    b.HasKey("BookId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UploadedBy");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Library.Domain.Models.Department", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DepartmentId");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            DepartmentId = new Guid("53adc674-e6c3-409c-aeab-94b0e94cc523"),
                            Description = "Department of Computer Science",
                            Name = "Computer Science"
                        },
                        new
                        {
                            DepartmentId = new Guid("d4e36e02-03bf-42dc-b7cc-de6e6541c5b2"),
                            Description = "Department of Mathematics",
                            Name = "Mathematics"
                        });
                });

            modelBuilder.Entity("Library.Domain.Models.Lecture", b =>
                {
                    b.Property<int>("LectureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LectureId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UploadedBy")
                        .HasColumnType("integer");

                    b.HasKey("LectureId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UploadedBy");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("Library.Domain.Models.Subject", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SubjectId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            SubjectId = new Guid("b286b7d8-575e-4a9e-8564-1f0b03cc22c5"),
                            DepartmentId = new Guid("53adc674-e6c3-409c-aeab-94b0e94cc523"),
                            Description = "Study of algorithms",
                            Name = "Algorithms"
                        },
                        new
                        {
                            SubjectId = new Guid("740456f9-f63b-4543-916a-7c5fcb9bc8c2"),
                            DepartmentId = new Guid("53adc674-e6c3-409c-aeab-94b0e94cc523"),
                            Description = "Study of data structures",
                            Name = "Data Structures"
                        },
                        new
                        {
                            SubjectId = new Guid("2dd9d9c2-f09e-4c0f-8255-b0581b1ff9ec"),
                            DepartmentId = new Guid("d4e36e02-03bf-42dc-b7cc-de6e6541c5b2"),
                            Description = "Study of calculus",
                            Name = "Calculus"
                        },
                        new
                        {
                            SubjectId = new Guid("99a8d8db-cec3-4c6c-b22b-bd5208428ca7"),
                            DepartmentId = new Guid("d4e36e02-03bf-42dc-b7cc-de6e6541c5b2"),
                            Description = "Study of linear algebra",
                            Name = "Linear Algebra"
                        });
                });

            modelBuilder.Entity("Library.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Library.Domain.Models.Book", b =>
                {
                    b.HasOne("Library.Domain.Models.Subject", "Subject")
                        .WithMany("Books")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Models.User", "User")
                        .WithMany("Books")
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Domain.Models.Lecture", b =>
                {
                    b.HasOne("Library.Domain.Models.Subject", "Subject")
                        .WithMany("Lectures")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Models.User", "User")
                        .WithMany("Lectures")
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Domain.Models.Subject", b =>
                {
                    b.HasOne("Library.Domain.Models.Department", "Department")
                        .WithMany("Subjects")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Library.Domain.Models.Department", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Library.Domain.Models.Subject", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Lectures");
                });

            modelBuilder.Entity("Library.Domain.Models.User", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Lectures");
                });
#pragma warning restore 612, 618
        }
    }
}
